name: Invalidations
description: 'Evaluate number of invalidations'

inputs:
  test_script:
    description: 'Script to test for invalidations. Defaults to `using Package`'
    required: false
    default: ''

outputs:
  total: 
    description: "Total number of invalidations"
    value: ${{ steps.invs.outputs.total }}
  deps: 
    description: "Number of invalidations caused by deps"
    value: ${{ steps.invs.outputs.deps }}

runs:
  using: "composite"
  steps: 
    - name: Get package name
      id: info
      run: |
          REPONAME="${{ github.event.repository.name }}"
          PACKAGENAME=${REPONAME%.jl}
          echo "packagename=$PACKAGENAME" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.test_script }}' == '' ]]; then
            TESTSCRIPT="using ${PACKAGENAME}"
          else
            TESTSCRIPT=${{ inputs.test_script }}
          fi
          echo "testscript=$TESTSCRIPT" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Install SnoopCompile tools
      run: |
        import Pkg;
        pkgs = [
            Pkg.PackageSpec(name = "SnoopCompile", version = "2", uuid = "aa65fe97-06da-5843-b5b1-d5d13cad87d2"),
            Pkg.PackageSpec(name = "SnoopCompileCore", uuid = "e2b509da-e806-4183-be48-004708413034"),
            Pkg.PackageSpec(name = "PrettyTables", uuid = "08abe8d2-0d0c-5749-adfa-8a2ac140af0d"),
        ]
        Pkg.add(pkgs)
      shell: julia --project {0}
    - name: Load package on branch
      id: invs
      run: |
        using SnoopCompileCore
        invalidations = @snoopr begin ${{ steps.info.outputs.testscript }} end
        
        using SnoopCompile
        inv_owned = length(filtermod(${{ steps.info.outputs.packagename }}, invalidation_trees(invalidations)))
        inv_total = length(uinvalidated(invalidations))
        inv_deps = inv_total - inv_owned
        
        @show inv_total, inv_deps

        # Report invalidations summary:
        using PrettyTables  # needed for `report_invalidations` to be defined
        SnoopCompile.report_invalidations(;
             invalidations,
             process_filename = x -> last(split(x, ".julia/packages/")),
             n_rows = 0,  # no-limit (show all invalidations)
        )

        # Set outputs
        open(ENV["GITHUB_OUTPUT"], "a") do io
          println(io, "total=$(inv_total)")
          println(io, "deps=$(inv_deps)")
        end
      shell: julia --color=yes --project=. {0}    
